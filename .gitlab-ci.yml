image: node:latest 

stages:
  - build
  - test
  - deploy

cache:
  paths:
    - node_modules/

services:
  - mysql:5.7
  - docker:dind

variables:
  DOCKER_HOST: tcp://0.0.0.0:5000

build:
  stage: build
  script:
    - apt-get update && apt-get install -y python3-pip
    - ls
    - cd client
    - ls
    - npm install
    - npm run build 
  after_script:
    - cd ../

test:
  stage: test
  image: docker:20.10.16
  services:
    - name: registry.hub.docker.com/library/docker:20.10.16-dind
      alias: docker
  before_script:
    #- docker start myapp
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - nohup sh -c "dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:5000 &"
    - sleep 15
    - docker info
    - docker build -t myapp .
    - docker tag myapp $CI_REGISTRY_IMAGE/myapp:latest
    - docker push $CI_REGISTRY_IMAGE/myapp:latest

    #- echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    #- docker start
    #- docker build --network=host -t myapp .
    #- docker tag myapp $CI_REGISTRY_IMAGE/myapp:latest
    #- docker push $CI_REGISTRY_IMAGE/myapp:latest
    #- docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    #- ls
    #- docker build --network=host -t myapp .
    #- docker push $CI_REGISTRY_IMAGE/myapp:latest
    - docker run --name mysql -e MYSQL_ROOT_PASSWORD=comsc -d mariadb:latest
    - sleep 20
    - docker exec -i mysql localhost -u root -pcomsc -e 'CREATE DATABASE app_db;'
    - docker exec -i mysql localhost -u root -pcomsc app_db < database/db_initialise.sql
    - docker run --name myapp -d -p 5000:5000 --link mysql:mysql myapp
    - cd ./flask-server
    #- pip install pytest
    - docker run --rm myapp pytest test_api.py
    - docker stop $(docker ps -a -q)
    - docker rm $(docker ps -a -q)
    - docker rmi $(docker images -q)

node_test:
  image: node:latest
  script:
    - ls
    - apt-get update && apt-get install -y python3-pip
    - cd client
    - npm install
    - npm test
  after_script:
    - cd ../


deploy:
  stage: deploy
  script:
    - apt-get update && apt-get install -y python3-pip
  # in deploy just for testing, should probably be moved 
  # put these in requirements 
  # add them to build or something 
    - pip install --upgrade pip
    - pip install -r requirements.txt
    
    
    # Doing this in the pipeline is bad, but it works  
    # - python server.py &
    # - npm start
